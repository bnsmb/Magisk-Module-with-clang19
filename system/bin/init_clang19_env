#!/system/bin/sh
#
# Script to init the environment vor clang
#
# Usage: see below or execute the script with the parameter "--help" 
#
#
# History
#  30.10.2024 v1.0.0 /bs
#    initial release
#  11.11.2024 v1.0.1 /bs
#    the script now exports the variable TMP with /data/local/tmp if /tmp does not exist and TMP is not set
#   
#

__TRUE=0
__FALSE=1

STANDALONE_SCRIPT=${__FALSE}

CONTINUE=${__TRUE}

PRINT_EXAMPLES=${__FALSE}

if [ ${CONTINUE} = ${__TRUE} ] ; then

  while [ $# -ne 0 ] ; do
    CUR_PARAMETER="$1"
    shift
    
    case ${CUR_PARAMETER} in
 
      -h | --help | help )
        cat <<EOT
        
Usage: . $0 [-h|--help] [init] [var=value] [examples]
 
init        - clear the used enviroment variables at script start
var=value   - set the environment variable "var" to "value" at start of the script
examples    - print compile examples 

EOT

        CONTINUE=${__FALSE}
      ;;

      examples | example | ex )
        PRINT_EXAMPLES=${__TRUE}
        ;;

      init | clear )
        echo "Clearing all used variables ..."
        unset CFLAGS CPPFLAGS CXXFLAGS LDFLAGS  API SYSROOT TARGET_ROOT CPU_TYPE CLANG_DIR CLANG_VERSION NDK_DIR
        ;;
    
      *=* )
        eval ${CUR_PARAMETER}
        if [ $? -ne 0 ] ; then
          echo "ERROR: Error executing \"${CUR_PARAMETER}\" "
          CONTINUE=${__FALSE}
        fi
        ;;

      * )
        echo "ERROR: Unknown parameter found: \"${CUR_PARAMETER}\" "
        CONTINUE=${__FALSE}
        ;;
    esac
  done

  if [[ $0 == *init_clang*_env* ]] ; then
    echo
    echo "*******************************************************************"
    echo " WARNING: The script $0 must be sourced in "
    echo "*******************************************************************"
    echo
    STANDALONE_SCRIPT=${__TRUE}                 
  fi

  CPU_TYPE="${CPU_TYPE:=$( uname -m )}"

  TARGET_ROOT="${TARGET_ROOT:=/data/local/tmp/develop/sysroot}"

  CLANG_VERSION="${CLANG_VERSION:=19}"


  CLANG_DIR="${CLANG_DIR:=/system/usr/clang${CLANG_VERSION}}"
 
  NDK_DIR="${NDK_DIR:=/system/usr/ndk/r27b}"

  SYSROOT="${SYSROOT:=${NDK_DIR}/sysroot}"

  API=${API:=35}
   
# ---------------------------------------------------------------------

  LIB_DIRS=""

  OBJ_DIRS=""
  
  INCLUDE_DIRS="${CLANG_DIR}/include"

  BIN_DIRS="${CLANG_DIR}/bin"

  SYSROOT_CONFIGURE_OPTION=""
 
  if [ "${NDK_DIR}"x != ""x ] ; then
    if [ -d  "${NDK_DIR}" ] ; then

      INCLUDE_DIRS="${INCLUDE_DIRS} ${NDK_DIR}/include"

    fi
  fi

  if [ "${SYSROOT}"x != ""x ] ; then
    if [ -d  "${SYSROOT}" ] ; then

      SYSROOT_LIB_DIR="${SYSROOT}/usr/lib/${CPU_TYPE}-linux-android"

      INCLUDE_DIRS="${INCLUDE_DIRS} ${SYSROOT}/usr/include"

      if [ -d ${SYSROOT_LIB_DIR}/${API} ] ; then
        LIB_DIRS="${LIB_DIRS} ${SYSROOT_LIB_DIR}/${API}"
        OBJ_DIRS="${OBJ_DIRS} ${SYSROOT_LIB_DIR}/${API}"
      fi

      if [ -d ${SYSROOT_LIB_DIR}/ ] ; then
        LIB_DIRS="${LIB_DIRS} ${SYSROOT_LIB_DIR}"
      fi
      
      
      [ -d ${SYSROOT}/usr/bin ] && BIN_DIRS="${BIN_DIRS} ${SYSROOT}/usr/bin"

      SYSROOT_CONFIGURE_OPTION="--sysroot ${SYSROOT}"

    else
      echo "WARNING: The sysroot directory ${SYSROOT} does not exist"	  
    fi
  fi

  CLANG="${CLANG_DIR}/bin/clang"

  export PATH="${CLANG_DIR}/bin:${PATH}"

# ---------------------------------------------------------------------

  if [ ! -x "${CLANG}" ] ; then
    echo "ERROR: The binary ${CLANG} does not exist or is not executable"
    CONTINUE=${__FALSE}
  fi
fi

# ---------------------------------------------------------------------

if [ ${CONTINUE} = ${__TRUE} ] ; then
 
  echo
  echo "Preparing the clang environment for creating binaries for the CPU type ${CPU_TYPE}"

  if [ "${TARGET_ROOT}"x != ""x ] ; then
    if [ -d  "${TARGET_ROOT}" ] ; then
      INCLUDE_DIRS="${INCLUDE_DIRS} ${TARGET_ROOT}/usr/include"
      BIN_DIRS="${BIN_DIRS} ${TARGET_ROOT}/usr/bin"
      LIB_DIRS="${LIB_DIRS} ${TARGET_ROOT}/usr/lib"
    else
     echo "INFO: The target root directory ${TARGET_ROOT} does not exist"  
    fi
  fi
  
  echo ""
  
  printf "%-90s %s\n" "Using clang ${CLANG_VERSION}" 
  printf "\n"

  if [ "${NDK_DIR}"x != ""x ] ; then
    printf "%-90s %s\n" "Using the NDK ${NDK_DIR}" "(environment variable NDK_DIR)"
  fi

  if [ "${SYSROOT}"x != ""x ] ; then
    printf "%-90s %s\n" "Using the sysroot directory ${SYSROOT}" "(environment variable SYSROOT)"
  fi

  if [ "${TARGET_ROOT}"x != ""x ] ; then
    printf "%-90s %s\n" "Using the target root directory ${TARGET_ROOT}" "(environment variable TARGET_ROOT)"
  fi

  printf "\n"
  
  echo ""
  
  for CUR_DIR in ${BIN_DIRS} ; do
    echo ":${PATH}:" | grep ":${CUR_DIR}:" >/dev/null
    if [ $? -ne 0 ] ; then
      if [ ! -d "${CUR_DIR}" ] ; then
        echo "WARNING: The directory \"${CUR_DIR}\" does not exist"
      fi
      [[ :${PATH}: != *:${CUR_DIR}: ]] && PATH="${CUR_DIR}:${PATH}"
    fi
  done
 
 
  for CUR_DIR in ${INCLUDE_DIRS} ; do
    if [ ! -d "${CUR_DIR}" ] ; then
      echo "WARNING: The directory \"${CUR_DIR}\" does not exist"
    fi
  
    echo "${CFLAGS} " | grep -- "-I${CUR_DIR} " >/dev/null
    if [ $? -ne 0 ] ; then
    echo "${CFLAGS} " | grep -- "-I${CUR_DIR} " >/dev/null
      CFLAGS="${CFLAGS} -I${CUR_DIR}"
    fi
  
    echo "${CPPFLAGS} " | grep -- "-I${CUR_DIR} " >/dev/null
    if [ $? -ne 0 ] ; then
       CPPFLAGS="${CPPFLAGS} -I${CUR_DIR}"
    fi
  
    echo "${CXXFLAGS} " | grep -- "-I${CUR_DIR} " >/dev/null
    if [ $? -ne 0 ] ; then
       CXXFLAGS="${CXXFLAGS} -I${CUR_DIR}"
    fi
  
  done

 
  for CUR_DIR in ${LIB_DIRS} ; do
    if [ ! -d "${CUR_DIR}" ] ; then
      echo "WARNING: The directory \"${CUR_DIR}\" does not exist"
    fi
  
    echo "${LDFLAGS} " | grep -- "-L${CUR_DIR} " >/dev/null
    if [ $? -ne 0 ] ; then
      LDFLAGS="${LDFLAGS} -L${CUR_DIR}"
    fi
  done


  for CUR_DIR in ${OBJ_DIRS} ; do
    if [ ! -d "${CUR_DIR}" ] ; then
      echo "WARNING: The directory \"${CUR_DIR}\" does not exist"
    fi
  
    echo "${LDFLAGS} " | grep -- "-B${CUR_DIR}/ " >/dev/null
    if [ $? -ne 0 ] ; then
      LDFLAGS="${LDFLAGS} -B${CUR_DIR}/"
    fi
  done
  

  if [ "${SYSROOT_CONFIGURE_OPTION}"x != ""x ] ; then 
    echo "$CFLAGS" | grep -- "--sysroot" >/dev/null ||
      CFLAGS="$CFLAGS --sysroot=${SYSROOT}"
  
    echo "$CPPFLAGS" | grep -- "--sysroot" >/dev/null ||
      CPPFLAGS="$CPPFLAGS --sysroot=${SYSROOT}"
  
    echo "$CXXLAGS" | grep -- "--sysroot" >/dev/null ||
      CXXFLAGS="$CXXFLAGS --sysroot=${SYSROOT}"
  
  
    echo "$LDFLAGS" | grep -- "--sysroot" >/dev/null ||
      LDFLAGS="$LDFLAGS --sysroot=${SYSROOT}"
    
  fi

  LDFLAGS="${LDFLAGS} -lc  "


  export LD_LIBRARY_PATH="${SYSROOT}/usr/lib/aarch64-linux-android/:${CLANG_DIR}/lib"

  export PATH CFLAGS CXXFLAGS CPPFLAGS LDFLAGS SYSROOT TARGET_ROOT API NDK SYSROOT

  export CC="${CLANG_DIR}/bin/clang"
  export CXX="${CLANG_DIR}/bin/clang++"
  export AR="${CLANG_DIR}/bin/llvm-ar"
  export AS="${CLANG_DIR}/bin/llvm-as"
  export LD="${CLANG_DIR}/bin/lld"
  export RANLIB="${CLANG_DIR}/bin/llvm-ranlib"
  export STRIP="${CLANG_DIR}/bin/llvm-strip"
  export CPP="${CLANG_DIR}/bin/clang-cpp"
  export CXXCPP="${CLANG_DIR}/bin/clang-cpp"
  export PKG_CONFIG="${CLANG_DIR}/bin/pkg-config"

  echo "Environment variables used:"
  
  printf "\n"
  printf "%-20s %s\n" "PATH is now:"             "${PATH}"
  printf "\n"
  
  printf "%-20s %s\n" "LD_LIBRARY_PATH:"         "${LD_LIBRARY_PATH}"
  printf "\n"
  printf "%-20s %s\n" "API is now:"              "${API}"
  printf "%-20s %s\n" "NDK_DIR is now:"          "${NDK_DIR}"
  printf "\n"
  printf "%-20s %s\n" "SYSROOT is now:"          "${SYSROOT}"
  printf "\n"

  printf "%-20s %s\n" "CFLAGS are now:"          "${CFLAGS}"
  printf "\n"
  printf "%-20s %s\n" "CPPFLAGS are now:"        "${CPPFLAGS}"
  printf "\n"
  printf "%-20s %s\n" "CXXFLAGS are now:"        "${CXXFLAGS}"
  printf "\n"
  printf "%-20s %s\n" "LDFLAGS are now:"         "${LDFLAGS}"
  printf "\n"
  
  for CUR_VAR in CC CXX CPP CXXCPP AR AS LD RANLIB STRIP PKG_CONFIG ; do
    eval CUR_VALUE="\$$CUR_VAR"
    printf "%-20s %s\n" "${CUR_VAR} is now:" "${CUR_VALUE}"
  done
 
  echo

  if [ ! -d /tmp ] ; then
    if [ "${TMP}"x = ""x ] ; then
      if [ -d /data/local/tmp ] ; then
        export TMP="/data/local/tmp"
        printf "%-20s %s\n" "TMP is now:"         "${TMP}"
      else
	echo "WARNING: The directories /tmp and /data/local/tmp do not exist - please set the variable TMP before using clang"
      fi
    fi
  fi 

  echo "Checking the clang binary ..."
  echo
  ${CLANG} --version
  THISRC=$?
  echo
  if [ ${THISRC} != 0 ] ; then
    echo "WARNING: Executing \"${CLANG} --version\" ended with RC=${THISRC}"
  fi
  
  if [ $API -lt 30 ] ; then
    echo
    echo "WARNING: Compling C++ program using API version less then 30 will probably not work"
    echo 
  fi
fi

export CC=${CLANG}
export LD=${LLD}

if [ ${PRINT_EXAMPLES} = ${__TRUE} ] ; then

  cat <<EOT

To test the clang environment use

cd /data/local/tmp
clang \${CFLAGS} \${LDFLAGS} -o helloworld_in_c helloworld_in_c.c  && ./helloworld_in_c

To test the C++ compiler use

cd /data/local/tmp
clang++ \${CPPFLAGS} \${LDFLAGS}  -o helloworld_in_c++ ./helloworld_in_c++.cpp && ./helloworld_in_c++

EOT

fi
